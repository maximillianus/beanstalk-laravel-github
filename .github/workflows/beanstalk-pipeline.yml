# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Start Deployment to Production!

      # Generate deployment package
      - name: Generate deployment package
        run: zip ./application.zip -r * .[^.]* -x "vendor/*"

      # Upload package
      - name: Upload zip artifact
        uses: actions/upload-artifact@v2
        with:
          name: appzip-artifact
          path: ./application.zip
          retention-days: 1
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: appzip-artifact
      - name: Beanstalk Deploy
        # You may pin to the exact commit or the version.
        # uses: einaregilsson/beanstalk-deploy@75b541583c94bec6dde89fff8b8642ea9da27f6b
        uses: einaregilsson/beanstalk-deploy@v17
        with:
          # AWS Access Key
          aws_access_key: ${{secrets.AWS_ACCESS_KEY_ID}}
          # AWS Secret Key
          aws_secret_key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          # AWS Session Token when using temporary security credentials such as when assuming a role in AWS through STS
#           aws_session_token: # optional
          # AWS Region
          region: ${{secrets.AWS_DEFAULT_REGION}}
          # Beanstalk application name
          application_name: "demo-laravel"
          # Beanstalk environment name. If empty a version will be created but not deployed anywhere.
          environment_name: "Demolaravel-env-1"
          # Version label for new Beanstalk version
          version_label: "github-laravel-${{ github.run_number }}"
          # Version description for the new Beanstalk version
#           version_description: # optional
          # Zip file with the version to deploy. If skipped the action will deploy existing version.
          deployment_package: "application.zip"
          # If set to "true" then the action will deploy an existing version with the given version_label if it already exists, but otherwise create the version and deploy it.
#           use_existing_version_if_available: # optional
          # Whether the action should wait for the deployment to finish and log status messages during the wait. Default is "true". If set to "false" the action will start the deployment on Beanstalk and then exit.
          wait_for_deployment: "true"
          # How many seconds to wait for the environment to return to Green state after deployment is finished. Default is 30 seconds.
          wait_for_environment_recovery: 30
